{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wagtail Live High speed publishing from messaging app to a Wagtail live blog. What does it do? [Explanation here] Installation To install: pip install wagtail-live Add 'wagtail_live' to your project's INSTALLED_APPS .","title":"Home"},{"location":"#wagtail-live","text":"High speed publishing from messaging app to a Wagtail live blog.","title":"Wagtail Live"},{"location":"#what-does-it-do","text":"[Explanation here]","title":"What does it do?"},{"location":"#installation","text":"To install: pip install wagtail-live Add 'wagtail_live' to your project's INSTALLED_APPS .","title":"Installation"},{"location":"development/","text":"Development Install this package in development mode: git clone git@github.com:wagtail/wagtail-live.git cd wagtail-live With your preferred virtualenv activated, install the package in development mode with the included testing and documentation dependencies: python -m pip install -e '.[test,docs]' -U Testing Run the test suite locally pytest Or test all supported configurations using tox: python -m pip install tox tox Code style linting Check code style of all files (requires GNU Make to be installed) make lint Fix any errors that can be automatically fixed make format Documentation Run documentation locally mkdocs serve Deploy documentation to Github pages: mkdocs gh-deploy See https://wagtail.github.io/wagtail-live/ Releasing new versions This package follows SemVer . Please keep SemVer in mind when updating the version number in src/wagtail_live/__init__.py . Building the package & publishing to PyPI Make sure you install the build extra before attempting to make a release: pip install -e '.[build]' This project comes with a helper script that assists in making a release. ./make_release.sh This script will: Verify that no git tag exists for the current version number. Builds wheels and source distributions. Show instructions on how to create a git tag. Show instructions on how to upload to PyPI.","title":"Development"},{"location":"development/#development","text":"Install this package in development mode: git clone git@github.com:wagtail/wagtail-live.git cd wagtail-live With your preferred virtualenv activated, install the package in development mode with the included testing and documentation dependencies: python -m pip install -e '.[test,docs]' -U","title":"Development"},{"location":"development/#testing","text":"Run the test suite locally pytest Or test all supported configurations using tox: python -m pip install tox tox","title":"Testing"},{"location":"development/#code-style-linting","text":"Check code style of all files (requires GNU Make to be installed) make lint Fix any errors that can be automatically fixed make format","title":"Code style linting"},{"location":"development/#documentation","text":"Run documentation locally mkdocs serve Deploy documentation to Github pages: mkdocs gh-deploy See https://wagtail.github.io/wagtail-live/","title":"Documentation"},{"location":"development/#releasing-new-versions","text":"This package follows SemVer . Please keep SemVer in mind when updating the version number in src/wagtail_live/__init__.py .","title":"Releasing new versions"},{"location":"development/#building-the-package-publishing-to-pypi","text":"Make sure you install the build extra before attempting to make a release: pip install -e '.[build]' This project comes with a helper script that assists in making a release. ./make_release.sh This script will: Verify that no git tag exists for the current version number. Builds wheels and source distributions. Show instructions on how to create a git tag. Show instructions on how to upload to PyPI.","title":"Building the package &amp; publishing to PyPI"},{"location":"getting_started/setup_long_polling/","text":"Set up long polling Publisher This document describes how to set up a publisher using the long polling technique. Configure WAGTAIL_LIVE_PUBLISHER In order to use the long polling technique for the publishing part, add this to your settings : WAGTAIL_LIVE_PUBLISHER = \"wagtail_live.publishers.LongPollingPublisher\" You can optionally set a polling timeout: WAGTAIL_LIVE_POLLING_TIMEOUT = value # in seconds The default value is 30 (s). Add publisher template We also need to add this to our live_blog_page.html template: { % include \"wagtail_live/polling/long_polling.html\" % } Make sure you have these 2 lines in your template: { % include \"wagtail_live/live_posts.html\" % } { % include \"wagtail_live/polling/long_polling.html\" % }","title":"Setup long polling publisher"},{"location":"getting_started/setup_long_polling/#set-up-long-polling-publisher","text":"This document describes how to set up a publisher using the long polling technique.","title":"Set up long polling Publisher"},{"location":"getting_started/setup_long_polling/#configure-wagtail_live_publisher","text":"In order to use the long polling technique for the publishing part, add this to your settings : WAGTAIL_LIVE_PUBLISHER = \"wagtail_live.publishers.LongPollingPublisher\" You can optionally set a polling timeout: WAGTAIL_LIVE_POLLING_TIMEOUT = value # in seconds The default value is 30 (s).","title":"Configure WAGTAIL_LIVE_PUBLISHER"},{"location":"getting_started/setup_long_polling/#add-publisher-template","text":"We also need to add this to our live_blog_page.html template: { % include \"wagtail_live/polling/long_polling.html\" % } Make sure you have these 2 lines in your template: { % include \"wagtail_live/live_posts.html\" % } { % include \"wagtail_live/polling/long_polling.html\" % }","title":"Add publisher template"},{"location":"getting_started/setup_ngrok/","text":"Set up a local web server with ngrok When using Wagtail Live, especially webhook receivers, you will often need to register a public URL which messaging apps use to send new updates to your Wagtail site. In a development environment, ngrok can help us expose a public web server and tunnel requests to our local server. Downloading ngrok Head to ngrok and download the version that corresponds to your platform. Installing ngrok To install ngrok, we only need to extract the file into a folder. Extract the ngrok zip file into the folder of your preference. - in downloads/ngrok_folder for example - Start ngrok server Navigate to the directory where you extracted ngrok - in our example downloads/ngrok_folder - and then start the server as follows: $ cd downloads/ngrok_folder $ ./ngrok http 8000 If all goes well, you should see something like this: ngrok by @inconshreveable (Ctrl+C to quit) Session Status online Update update available (version 2.3.40, Ctrl-U to update Version 2.35 Web Interface http://127.0.1:4040 Forwarding http://4e0cd6d40780.ngrok.io -> http:localhost:8000 Forwarding https://4e0cd6d40780.ngrok.io -> http:localhost:8000 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Note: Most messaging apps will require the one that starts with https:// . You can now register a public-facing URL that tunnels to your local server.","title":"Setup a local web server with ngrok"},{"location":"getting_started/setup_ngrok/#set-up-a-local-web-server-with-ngrok","text":"When using Wagtail Live, especially webhook receivers, you will often need to register a public URL which messaging apps use to send new updates to your Wagtail site. In a development environment, ngrok can help us expose a public web server and tunnel requests to our local server.","title":"Set up a local web server with ngrok"},{"location":"getting_started/setup_ngrok/#downloading-ngrok","text":"Head to ngrok and download the version that corresponds to your platform.","title":"Downloading ngrok"},{"location":"getting_started/setup_ngrok/#installing-ngrok","text":"To install ngrok, we only need to extract the file into a folder. Extract the ngrok zip file into the folder of your preference. - in downloads/ngrok_folder for example -","title":"Installing ngrok"},{"location":"getting_started/setup_ngrok/#start-ngrok-server","text":"Navigate to the directory where you extracted ngrok - in our example downloads/ngrok_folder - and then start the server as follows: $ cd downloads/ngrok_folder $ ./ngrok http 8000 If all goes well, you should see something like this: ngrok by @inconshreveable (Ctrl+C to quit) Session Status online Update update available (version 2.3.40, Ctrl-U to update Version 2.35 Web Interface http://127.0.1:4040 Forwarding http://4e0cd6d40780.ngrok.io -> http:localhost:8000 Forwarding https://4e0cd6d40780.ngrok.io -> http:localhost:8000 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Note: Most messaging apps will require the one that starts with https:// . You can now register a public-facing URL that tunnels to your local server.","title":"Start ngrok server"},{"location":"getting_started/setup_slack/","text":"Set up Slack Events API receiver This document walks you through how to set up Slack as an input source for your live blog and use their Events API to receive new updates. Create a Slack app First, you will need to create a Slack app . You may be prompted to create it from scratch or from an App Manifest. For the purpose of this tutorial, you can create your app from scratch. Fill out your app name and pick a workspace to develop your app in. Click the Create App button and you should see your app's Basic Information page. Retrieve your tokens Wagtail Live needs the following information to communicate with your app: SLACK_SIGNING_SECRET Slack signs all the requests it sends using a secret key. Wagtail Live needs that key to confirm that requests sent to the wagtail_live/slack/events endpoint come from Slack, by verifying their unique signature (you will learn more about this endpoint later). To find your secret key, go back to your app's page and navigate to the Basic Information section on the left sidebar. Scroll down to App Credentials and you'll find your Signing Secret in the SLACK_SIGNING_SECRET field. Grab it and keep it in a safe place. SLACK_BOT_TOKEN You will need to provide this token to be able to download images from the Slack API. In your app's Basic Information page, navigate to the OAuth & Permissions on the left sidebar and scroll down to the Bot Token Scopes section. Click Add an OAuth Scope . Add the channels:history scope. This scope lets your app view messages and other content in public channels that your Slack app has been added to. Add the files:read scope. This scope gives your app the ability to read/download images in channels and conversations your Slack app has been added to Scroll up to the top of the OAuth & Permissions page and click Install App to Workspace . You\u2019ll need to allow your app to be installed to your development workspace. Once you authorize the installation, you\u2019ll get back to the OAuth & Permissions page and see a Bot User OAuth Access Token which starts with xoxb- . Grab the token and copy it somewhere. Keep your token safe! Save your tokens Let's save the bot token and signing secret as environment variables like this: On Windows (cmd.exe): > SET SLACK_SIGNING_SECRET =< your-signing-secret> > SET SLACK_BOT_TOKEN = xoxb- < your-bot-token> On GNU/Linux or MacOS (bash): $ export SLACK_SIGNING_SECRET = <your-signing-secret> $ export SLACK_BOT_TOKEN = xoxb-<your-bot-token> Add your tokens to settings Add the following in your settings.base file: SLACK_SIGNING_SECRET = os . environ [ 'SLACK_SIGNING_SECRET' ] SLACK_BOT_TOKEN = os . environ [ 'SLACK_BOT_TOKEN' ] Receiving Slack events In order to receive events like when a message is sent in a channel, you need to hook a Request URL that Slack uses to send HTTP POST requests corresponding to events you specify. This URL needs to be publicly accessible. In the development phase, you will need a development proxy that creates a public URL and tunnels requests to your local server when you run python3 manage.py runserver in order to receive events from Slack. If you are comfortable with ngrok, start ngrok on port 8000. Otherwise you can see how to Set up a local web server with ngrok . Configure SlackEventsAPIReceiver Add the following to your urls.py file if not done yet: from wagtail_live import urls as live_urls urlpatterns += [ path ( 'wagtail_live/' , include ( live_urls )), ] Add the following to your settings file: WAGTAIL_LIVE_RECEIVER = \"wagtail_live.adapters.slack.receiver.SlackEventsAPIReceiver\" Make sure ngrok is running on port 8000 and start the development server in another shell like this: $ python3 manage.py runserver Hook your request URL Go back to your app's Basic Information page and look for Event Subscriptions . Toggle the Enable events button. You'll be asked to type a Request URL . Get the URL generated by ngrok (the one that starts with https://) and append /wagtail_live/slack/events to it. For example, if your generated URL is something like https://abc.ngrok.io , then the Request URL you should enter in Slack should be https://abc.ngrok.io/wagtail_live/slack/events . As soon as you type the URL, Slack will send a POST request to verify it. Wagtail Live should handle this verification for you. You should see a green box indicating that your Request URL has been verified. From now on, Slack will send a POST request to https://abc.ngrok.io/wagtail_live/slack/events whenever an event your bot has subscribed to occurs in Slack. Channel configuration Subscribe to Bot Events After your request URL is verified, scroll down to Subscribe to Bot Events and click the Add Bot User Event button. Choose the message.channels event and hit the Save Changes button. This allows your bot to listen for messages in public channels that it is added to. To listen for other types of messages/channels, see this list to check which scope you need to grant to your bot. Add your app to a channel In the workspace where you installed the app, create a new channel. In the channel's page, look for the Show channel details icon at the top right of the page and click it. You will see another More dropdown button, click it and choose Add apps . Add your app to the channel. Retrieve your channel's ID To finish, you will need your channel's ID to create a page which will map to this channel in your live site. To find the identifier of the channel you created, go to the channel's page, and grab the second identifier in the URL displayed on the address bar. For example, if you go on your channel's page and the URL looks like https://app.slack.com/client/T023G8L63FS/C024931MDK3 , then your channel identifier is C024931MDK3 . You can then create a live page and add this identifier to the channel_id field of that page. From then, all messages changed/edited/deleted in the channel you created in Slack will be synced with your live page!","title":"Setup Slack Events API receiver"},{"location":"getting_started/setup_slack/#set-up-slack-events-api-receiver","text":"This document walks you through how to set up Slack as an input source for your live blog and use their Events API to receive new updates.","title":"Set up Slack Events API receiver"},{"location":"getting_started/setup_slack/#create-a-slack-app","text":"First, you will need to create a Slack app . You may be prompted to create it from scratch or from an App Manifest. For the purpose of this tutorial, you can create your app from scratch. Fill out your app name and pick a workspace to develop your app in. Click the Create App button and you should see your app's Basic Information page.","title":"Create a Slack app"},{"location":"getting_started/setup_slack/#retrieve-your-tokens","text":"Wagtail Live needs the following information to communicate with your app: SLACK_SIGNING_SECRET Slack signs all the requests it sends using a secret key. Wagtail Live needs that key to confirm that requests sent to the wagtail_live/slack/events endpoint come from Slack, by verifying their unique signature (you will learn more about this endpoint later). To find your secret key, go back to your app's page and navigate to the Basic Information section on the left sidebar. Scroll down to App Credentials and you'll find your Signing Secret in the SLACK_SIGNING_SECRET field. Grab it and keep it in a safe place. SLACK_BOT_TOKEN You will need to provide this token to be able to download images from the Slack API. In your app's Basic Information page, navigate to the OAuth & Permissions on the left sidebar and scroll down to the Bot Token Scopes section. Click Add an OAuth Scope . Add the channels:history scope. This scope lets your app view messages and other content in public channels that your Slack app has been added to. Add the files:read scope. This scope gives your app the ability to read/download images in channels and conversations your Slack app has been added to Scroll up to the top of the OAuth & Permissions page and click Install App to Workspace . You\u2019ll need to allow your app to be installed to your development workspace. Once you authorize the installation, you\u2019ll get back to the OAuth & Permissions page and see a Bot User OAuth Access Token which starts with xoxb- . Grab the token and copy it somewhere. Keep your token safe!","title":"Retrieve your tokens"},{"location":"getting_started/setup_slack/#save-your-tokens","text":"Let's save the bot token and signing secret as environment variables like this: On Windows (cmd.exe): > SET SLACK_SIGNING_SECRET =< your-signing-secret> > SET SLACK_BOT_TOKEN = xoxb- < your-bot-token> On GNU/Linux or MacOS (bash): $ export SLACK_SIGNING_SECRET = <your-signing-secret> $ export SLACK_BOT_TOKEN = xoxb-<your-bot-token>","title":"Save your tokens"},{"location":"getting_started/setup_slack/#add-your-tokens-to-settings","text":"Add the following in your settings.base file: SLACK_SIGNING_SECRET = os . environ [ 'SLACK_SIGNING_SECRET' ] SLACK_BOT_TOKEN = os . environ [ 'SLACK_BOT_TOKEN' ]","title":"Add your tokens to settings"},{"location":"getting_started/setup_slack/#receiving-slack-events","text":"In order to receive events like when a message is sent in a channel, you need to hook a Request URL that Slack uses to send HTTP POST requests corresponding to events you specify. This URL needs to be publicly accessible. In the development phase, you will need a development proxy that creates a public URL and tunnels requests to your local server when you run python3 manage.py runserver in order to receive events from Slack. If you are comfortable with ngrok, start ngrok on port 8000. Otherwise you can see how to Set up a local web server with ngrok .","title":"Receiving Slack events"},{"location":"getting_started/setup_slack/#configure-slackeventsapireceiver","text":"Add the following to your urls.py file if not done yet: from wagtail_live import urls as live_urls urlpatterns += [ path ( 'wagtail_live/' , include ( live_urls )), ] Add the following to your settings file: WAGTAIL_LIVE_RECEIVER = \"wagtail_live.adapters.slack.receiver.SlackEventsAPIReceiver\" Make sure ngrok is running on port 8000 and start the development server in another shell like this: $ python3 manage.py runserver","title":"Configure SlackEventsAPIReceiver"},{"location":"getting_started/setup_slack/#hook-your-request-url","text":"Go back to your app's Basic Information page and look for Event Subscriptions . Toggle the Enable events button. You'll be asked to type a Request URL . Get the URL generated by ngrok (the one that starts with https://) and append /wagtail_live/slack/events to it. For example, if your generated URL is something like https://abc.ngrok.io , then the Request URL you should enter in Slack should be https://abc.ngrok.io/wagtail_live/slack/events . As soon as you type the URL, Slack will send a POST request to verify it. Wagtail Live should handle this verification for you. You should see a green box indicating that your Request URL has been verified. From now on, Slack will send a POST request to https://abc.ngrok.io/wagtail_live/slack/events whenever an event your bot has subscribed to occurs in Slack.","title":"Hook your request URL"},{"location":"getting_started/setup_slack/#channel-configuration","text":"","title":"Channel configuration"},{"location":"getting_started/setup_slack/#subscribe-to-bot-events","text":"After your request URL is verified, scroll down to Subscribe to Bot Events and click the Add Bot User Event button. Choose the message.channels event and hit the Save Changes button. This allows your bot to listen for messages in public channels that it is added to. To listen for other types of messages/channels, see this list to check which scope you need to grant to your bot.","title":"Subscribe to Bot Events"},{"location":"getting_started/setup_slack/#add-your-app-to-a-channel","text":"In the workspace where you installed the app, create a new channel. In the channel's page, look for the Show channel details icon at the top right of the page and click it. You will see another More dropdown button, click it and choose Add apps . Add your app to the channel.","title":"Add your app to a channel"},{"location":"getting_started/setup_slack/#retrieve-your-channels-id","text":"To finish, you will need your channel's ID to create a page which will map to this channel in your live site. To find the identifier of the channel you created, go to the channel's page, and grab the second identifier in the URL displayed on the address bar. For example, if you go on your channel's page and the URL looks like https://app.slack.com/client/T023G8L63FS/C024931MDK3 , then your channel identifier is C024931MDK3 . You can then create a live page and add this identifier to the channel_id field of that page. From then, all messages changed/edited/deleted in the channel you created in Slack will be synced with your live page!","title":"Retrieve your channel's ID"},{"location":"getting_started/setup_telegram/","text":"Setup Telegram webhook receiver This document walks you through how to set up Telegram as an input source for your live blog and set a webhook connection to receive new updates. Create a Telegram bot First, you will need to create a Telegram bot . After creating a bot, an authorization token will be genrated for your new bot. The token is a string along the lines of 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw that is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely, it can be used by anyone to control your bot. Save your bot token Let's save the bot token as an environment variable like this: On Windows (cmd.exe): > SET TELEGRAM_BOT_TOKEN =< your-bot-token> On GNU/Linux or MacOS (bash): $ export TELEGRAM_BOT_TOKEN = <your-bot-token> Add your bot token to settings Add the following in your settings.base file: TELEGRAM_BOT_TOKEN = os . environ [ 'TELEGRAM_BOT_TOKEN' ] Receiving Telegram events In order to receive events like when a message is sent in a channel, you need to hook a Webhook URL that Telegram uses to send HTTP POST requests corresponding to events you specify. This URL needs to be publicly accessible. Configure TELEGRAM_WEBHOOK_URL In the development phase, you will need a development proxy that creates a public URL and tunnels requests to your local server when you run python3 manage.py runserver in order to receive events from Telegram. If you are comfortable with ngrok, start ngrok on port 8000. Otherwise you can see how to Set up a local web server with ngrok . Make sure ngrok is running on port 8000 and add the URL generated by ngrok to your settings file: ```python TELEGRAM_WEBHOOK_URL = \"https://ngrok-generated-url.com\" ``` Configure TelegramWebhookReceiver Add the following in your urls.py file if not done yet: from wagtail_live import urls as live_urls urlpatterns += [ path ( 'wagtail_live/' , include ( live_urls )), ] Add the following in your settings file: WAGTAIL_LIVE_RECEIVER = \"wagtail_live.adapters.telegram.TelegramWebhookReceiver\" That's all we need to receive events from Telegram. Run the following: $ python3 manage.py runserver If everything went well, the server should start without errors. Channel configuration We can send messages from the bot's channel or invite the bot in another channel. For this tutorial, we will post to the bot's channel directly. You can find the link to your bot's channel in BotFather where you created the bot. Retrieve chat ID In the chat where you want to post messages, type the following: /get_chat_id . Your bot will answer with the ID of the current chat. You can then create a live page and add the chat ID to the channel_id field of that page. From then, all messages added or edited in the chat will be synced with your live page! Note : Telegram doesn't send updates when a message is deleted. This means that when you delete a message in a Telegram chat it won't be automatically deleted from your LivePage.","title":"Setup Telegram webhook receiver"},{"location":"getting_started/setup_telegram/#setup-telegram-webhook-receiver","text":"This document walks you through how to set up Telegram as an input source for your live blog and set a webhook connection to receive new updates.","title":"Setup Telegram webhook receiver"},{"location":"getting_started/setup_telegram/#create-a-telegram-bot","text":"First, you will need to create a Telegram bot . After creating a bot, an authorization token will be genrated for your new bot. The token is a string along the lines of 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw that is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely, it can be used by anyone to control your bot.","title":"Create a Telegram bot"},{"location":"getting_started/setup_telegram/#save-your-bot-token","text":"Let's save the bot token as an environment variable like this: On Windows (cmd.exe): > SET TELEGRAM_BOT_TOKEN =< your-bot-token> On GNU/Linux or MacOS (bash): $ export TELEGRAM_BOT_TOKEN = <your-bot-token>","title":"Save your bot token"},{"location":"getting_started/setup_telegram/#add-your-bot-token-to-settings","text":"Add the following in your settings.base file: TELEGRAM_BOT_TOKEN = os . environ [ 'TELEGRAM_BOT_TOKEN' ]","title":"Add your bot token to settings"},{"location":"getting_started/setup_telegram/#receiving-telegram-events","text":"In order to receive events like when a message is sent in a channel, you need to hook a Webhook URL that Telegram uses to send HTTP POST requests corresponding to events you specify. This URL needs to be publicly accessible.","title":"Receiving Telegram events"},{"location":"getting_started/setup_telegram/#configure-telegram_webhook_url","text":"In the development phase, you will need a development proxy that creates a public URL and tunnels requests to your local server when you run python3 manage.py runserver in order to receive events from Telegram. If you are comfortable with ngrok, start ngrok on port 8000. Otherwise you can see how to Set up a local web server with ngrok . Make sure ngrok is running on port 8000 and add the URL generated by ngrok to your settings file: ```python TELEGRAM_WEBHOOK_URL = \"https://ngrok-generated-url.com\" ```","title":"Configure TELEGRAM_WEBHOOK_URL"},{"location":"getting_started/setup_telegram/#configure-telegramwebhookreceiver","text":"Add the following in your urls.py file if not done yet: from wagtail_live import urls as live_urls urlpatterns += [ path ( 'wagtail_live/' , include ( live_urls )), ] Add the following in your settings file: WAGTAIL_LIVE_RECEIVER = \"wagtail_live.adapters.telegram.TelegramWebhookReceiver\" That's all we need to receive events from Telegram. Run the following: $ python3 manage.py runserver If everything went well, the server should start without errors.","title":"Configure TelegramWebhookReceiver"},{"location":"getting_started/setup_telegram/#channel-configuration","text":"We can send messages from the bot's channel or invite the bot in another channel. For this tutorial, we will post to the bot's channel directly. You can find the link to your bot's channel in BotFather where you created the bot.","title":"Channel configuration"},{"location":"getting_started/setup_telegram/#retrieve-chat-id","text":"In the chat where you want to post messages, type the following: /get_chat_id . Your bot will answer with the ID of the current chat. You can then create a live page and add the chat ID to the channel_id field of that page. From then, all messages added or edited in the chat will be synced with your live page! Note : Telegram doesn't send updates when a message is deleted. This means that when you delete a message in a Telegram chat it won't be automatically deleted from your LivePage.","title":"Retrieve chat ID"},{"location":"getting_started/tutorial/","text":"Wagtail Live Tutorial This tutorial describes how to build a live blog with Wagtail Live. Install and run Wagtail Live Create and activate a virtual environment We recommend using a virtual environment, which isolates installed dependencies from other projects. This tutorial uses venv , which is packaged with Python 3. Create a new virtual environment by running: On Windows (cmd.exe): > python3 -m venv livesite\\livesite > livesite\\livesite\\Scripts\\activate.bat On GNU/Linux or MacOS (bash): $ python3 -m venv livesite/livesite $ source livesite/livesite/bin/activate For other shells see the venv documentation . Install Wagtail Live and other dependencies Use pip to install Wagtail and Wagtail Live: $ python -m pip install wagtail $ python -m pip install wagtail-live Generate your site Because the folder livesite was already created by venv , run wagtail start with an additional argument to specify the destination directory: $ wagtail start livesite livesite Create your first live page Start a new liveblog app: $ cd livesite $ python3 manage.py startapp liveblog You will then need to add wagtail_live and liveblog to your INSTALLED_APPS in your settings.base file: INSTALLED_APPS = [ 'home' , 'search' , 'liveblog' , 'wagtail_live' , ... # Other apps ] We can now create our first LiveBlogPage . Add the following in liveblog.models : from wagtail.core.models import Page from wagtail_live.models import LivePageMixin class LiveBlogPage ( Page , LivePageMixin ): content_panels = Page . content_panels + LivePageMixin . panels Create a templates folder inside your liveblog app. Add a liveblog folder in the templates folder that you just created and create a live_blog_page.html file. This represents our LiveBlogPage template. For now, add this to your live_blog_page.html template: { % include \"wagtail_live/live_posts.html\" % } That's all we need in our models. Create the database Let's create our tables now: $ python3 manage.py makemigrations $ python3 manage.py migrate Create an admin user $ python3 manage.py createsuperuser When logged into the admin site, a superuser has full permissions and is able to view/create/manage the database. Configure an input source and its corresponding receiver We need an input source for our live blog. An input source is a platform (often a messaging app, but any other tool that allows content editing and offers an API can be used) where we edit the content that appears on the front-end/client side. We also need a receiver for our input source. The goal of a receiver is to receive/retrieve updates from an input source. For this tutorial, we will use Slack as an input source and configure its corresponding receiver. To do so, follow the steps in Setup Slack Events API receiver Configuring a publisher The last step required is to configure a publisher. The goal of publishers is to \"publish\" new updates to the frontend/client side. In this tutorial we will use the long polling technique to publish new updates on the frontend. To do so, follow the steps in Set up long polling publisher That's it for the configuration part. Liveblogging Go to http://127.0.0.1:8000/admin/ and create a new page of type LiveBlogPage . You can choose the title you like for the page and fill the channel_id field with the ID of the channel you created in Slack. Click on the Live button to display the page. Enter in the channel you created in Slack and start posting in the channel. You should see your posts in the page momentarily!","title":"Tutorial"},{"location":"getting_started/tutorial/#wagtail-live-tutorial","text":"This tutorial describes how to build a live blog with Wagtail Live.","title":"Wagtail Live Tutorial"},{"location":"getting_started/tutorial/#install-and-run-wagtail-live","text":"","title":"Install and run Wagtail Live"},{"location":"getting_started/tutorial/#create-and-activate-a-virtual-environment","text":"We recommend using a virtual environment, which isolates installed dependencies from other projects. This tutorial uses venv , which is packaged with Python 3. Create a new virtual environment by running: On Windows (cmd.exe): > python3 -m venv livesite\\livesite > livesite\\livesite\\Scripts\\activate.bat On GNU/Linux or MacOS (bash): $ python3 -m venv livesite/livesite $ source livesite/livesite/bin/activate For other shells see the venv documentation .","title":"Create and activate a virtual environment"},{"location":"getting_started/tutorial/#install-wagtail-live-and-other-dependencies","text":"Use pip to install Wagtail and Wagtail Live: $ python -m pip install wagtail $ python -m pip install wagtail-live","title":"Install Wagtail Live and other dependencies"},{"location":"getting_started/tutorial/#generate-your-site","text":"Because the folder livesite was already created by venv , run wagtail start with an additional argument to specify the destination directory: $ wagtail start livesite livesite","title":"Generate your site"},{"location":"getting_started/tutorial/#create-your-first-live-page","text":"Start a new liveblog app: $ cd livesite $ python3 manage.py startapp liveblog You will then need to add wagtail_live and liveblog to your INSTALLED_APPS in your settings.base file: INSTALLED_APPS = [ 'home' , 'search' , 'liveblog' , 'wagtail_live' , ... # Other apps ] We can now create our first LiveBlogPage . Add the following in liveblog.models : from wagtail.core.models import Page from wagtail_live.models import LivePageMixin class LiveBlogPage ( Page , LivePageMixin ): content_panels = Page . content_panels + LivePageMixin . panels Create a templates folder inside your liveblog app. Add a liveblog folder in the templates folder that you just created and create a live_blog_page.html file. This represents our LiveBlogPage template. For now, add this to your live_blog_page.html template: { % include \"wagtail_live/live_posts.html\" % } That's all we need in our models.","title":"Create your first live page"},{"location":"getting_started/tutorial/#create-the-database","text":"Let's create our tables now: $ python3 manage.py makemigrations $ python3 manage.py migrate","title":"Create the database"},{"location":"getting_started/tutorial/#create-an-admin-user","text":"$ python3 manage.py createsuperuser When logged into the admin site, a superuser has full permissions and is able to view/create/manage the database.","title":"Create an admin user"},{"location":"getting_started/tutorial/#configure-an-input-source-and-its-corresponding-receiver","text":"We need an input source for our live blog. An input source is a platform (often a messaging app, but any other tool that allows content editing and offers an API can be used) where we edit the content that appears on the front-end/client side. We also need a receiver for our input source. The goal of a receiver is to receive/retrieve updates from an input source. For this tutorial, we will use Slack as an input source and configure its corresponding receiver. To do so, follow the steps in Setup Slack Events API receiver","title":"Configure an input source and its corresponding receiver"},{"location":"getting_started/tutorial/#configuring-a-publisher","text":"The last step required is to configure a publisher. The goal of publishers is to \"publish\" new updates to the frontend/client side. In this tutorial we will use the long polling technique to publish new updates on the frontend. To do so, follow the steps in Set up long polling publisher That's it for the configuration part.","title":"Configuring a publisher"},{"location":"getting_started/tutorial/#liveblogging","text":"Go to http://127.0.0.1:8000/admin/ and create a new page of type LiveBlogPage . You can choose the title you like for the page and fill the channel_id field with the ID of the channel you created in Slack. Click on the Live button to display the page. Enter in the channel you created in Slack and start posting in the channel. You should see your posts in the page momentarily!","title":"Liveblogging"}]}